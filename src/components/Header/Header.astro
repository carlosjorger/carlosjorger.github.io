---
import Link from './Link.astro';
import SideBarLink from './SideBarLink.astro';
import HamburgerMenuIcon from './HamburgerMenuIcon.astro';
import IconHome from '@icons/IconHome.astro';
import IconContainer from '@icons/IconContainer.astro';
import IconAddress from '@icons/IconAddress.astro';
import IconUser from '@icons/IconUser.astro';
import IconCode from '@icons/IconCode.astro';
import IconBriefcase from '@icons/IconBriefcase.astro';
import LocaleSelector from './LocaleSelector.astro';
import WidthContainer from '@components/shared/WidthContainer.astro';
import { getHref } from 'i18n';

export interface Props {
	HEADER_PROJECTS: string;
	HEADER_PROJECTS_ARIA_LABEL: string;
	HEADER_HOME: string;
	HEADER_HOME_ARIA_LABEL: string;
	ABOUT_ME_TITLE: string;
	HEADER_ABOUT_ME_ARIA_LABEL: string;
	CONTACT_TITLE: string;
	HEADER_CONTACT_ARIA_LABEL: string;
	HEADER_EXPERIENCE: string;
	HEADER_EXPERIENCE_ARIA_LABEL: string;
	LOCALES: {
		SPANISH: string;
		ENGLISH: string;
	};
	public_src: string;
}
const {
	ABOUT_ME_TITLE,
	CONTACT_TITLE,
	HEADER_PROJECTS,
	HEADER_HOME,
	HEADER_HOME_ARIA_LABEL,
	HEADER_PROJECTS_ARIA_LABEL,
	HEADER_ABOUT_ME_ARIA_LABEL,
	HEADER_CONTACT_ARIA_LABEL,
	LOCALES,
	HEADER_EXPERIENCE,
	HEADER_EXPERIENCE_ARIA_LABEL,
	public_src,
} = Astro.props;

const { currentLocale } = Astro;
const urlPrefix = getHref(currentLocale);
const headerLinks = [
	{
		href: `${urlPrefix}#work`,
		'aria-label': HEADER_PROJECTS_ARIA_LABEL,
		label: HEADER_PROJECTS,
		icon: IconCode,
	},
	{
		href: `${urlPrefix}#experience`,
		'aria-label': HEADER_EXPERIENCE_ARIA_LABEL,
		label: HEADER_EXPERIENCE,
		icon: IconBriefcase,
	},
	{
		href: `${urlPrefix}#aboutMe`,
		'aria-label': HEADER_ABOUT_ME_ARIA_LABEL,
		label: ABOUT_ME_TITLE,
		icon: IconUser,
	},
	{
		href: `${urlPrefix}#contact`,
		'aria-label': HEADER_CONTACT_ARIA_LABEL,
		label: CONTACT_TITLE,
		icon: IconAddress,
	},
];
---

<script>
	const createDropdownEvents = (buttonId: string, dropdownID: string) => {
		import('flowbite').then(({ Dropdown }) => {
			const $buttonElement: HTMLElement | null = document.querySelector(
				`#${buttonId}`
			);
			const $modalElement: HTMLElement | null = document.querySelector(
				`#${dropdownID}`
			);
			const options = {
				placement: 'bottom',
				triggerType: 'click',
				offsetSkidding: 0,
				offsetDistance: 10,
				delay: 300,
				ignoreClickOutsideClass: false,
				onHide: () => {},
				onShow: () => {},
				onToggle: () => {},
			};
			const instanceOptions = {
				id: buttonId,
				override: true,
			};
			const modal = new Dropdown(
				$modalElement,
				$buttonElement,
				options as any,
				instanceOptions
			);
			if ($buttonElement) {
				$buttonElement.addEventListener('click', () => modal.show());
			}
		});
	};
	document.addEventListener('astro:page-load', async () => {
		createDropdownEvents(
			'dropdownLocaleButtonSideBar',
			'dropdownLocaleButtonSideBarDropdown'
		);
		createDropdownEvents(
			'dropdownLocaleButton',
			'dropdownLocaleButtonDropdown'
		);
	});

	document.addEventListener('astro:page-load', async () => {
		import('@utils/touchEvents').then(
			({ touchOutsideColumnNavbar, touchIcon }) => {
				document.addEventListener(
					'touchstart',
					touchOutsideColumnNavbar,
					{
						passive: true,
					}
				);
				const changeSiderElements =
					document.getElementsByClassName('change-sidebar');
				for (const element of changeSiderElements) {
					element.addEventListener('click', touchIcon);
				}
			}
		);
	});
</script>
<header>
	<nav class="header-animation fixed top-0 z-[4] w-full">
		<WidthContainer>
			<ul
				class="flex list-none flex-row items-center justify-between p-0.5 max-sm:hidden [&>li]:self-center"
			>
				<li class="mt-1 p-0.5">
					<Link
						href=`${urlPrefix}#home`
						aria-label={HEADER_HOME_ARIA_LABEL}
					>
						<IconContainer class="h-9 w-9">
							<IconHome />
						</IconContainer>
					</Link>
				</li>
				<li class="flex flex-row gap-x-3">
					{
						headerLinks.map(({ label, ...attributes }) => (
							<Link {...attributes}>{label}</Link>
						))
					}
				</li>
				<li>
					<LocaleSelector
						id="dropdownLocaleButton"
						dropdown_id="dropdownLocaleButtonDropdown"
						{...LOCALES}
					/>
				</li>
			</ul>
		</WidthContainer>
	</nav>
	<nav class="fixed top-0 z-[2] hidden w-full max-sm:block">
		<HamburgerMenuIcon />
		<div
			class="changeable z-[2] flex h-16 w-full flex-row justify-end p-3 shadow-[0px_0px_20px] backdrop-blur"
		>
			<LocaleSelector
				id="dropdownLocaleButtonSideBar"
				dropdown_id="dropdownLocaleButtonSideBarDropdown"
				{...LOCALES}
			/>
		</div>
		<div
			class="nav-columnar-menu-background changeable bg-[rgba(0, 0, 0, 0)] invisible absolute top-0 z-50 mt-0 h-screen w-screen overflow-hidden p-0 transition-all delay-100 duration-300 ease-out max-sm:h-[100dvh] [&.active]:bg-[#00000080] [&.active]:ease-in-out"
		>
			<div
				id="nav-columnar-menu"
				class="changeable absolute left-[-100vw] mt-0 h-screen w-3/4 bg-[#241c2d] text-[0.9rem] transition-all duration-500 ease-out [&.active]:left-0 [&.active]:ease-in-out"
			>
				<picture
					class="image-container m-auto block w-11/12 p-2 text-center"
				>
					<img
						class="logo changeable m-auto h-auto rotate-180 transition-all duration-500 ease-out [&.active]:rotate-0"
						src=`${public_src}/images/logo.svg`
						alt="logo"
						width="200"
						height="200"
					/>
				</picture>
				<hr
					class="m-auto h-0.5 w-[80%] border-0 bg-[var(--default-font-color)]"
				/>
				<nav>
					<ul
						id="nav-columnar-menu-list"
						class="flex list-none flex-col items-center p-0 text-xl"
					>
						<li>
							<SideBarLink
								href="#"
								aria-label={HEADER_HOME_ARIA_LABEL}
								label={HEADER_HOME}
							>
								<IconContainer class="h-7 w-7">
									<IconHome />
								</IconContainer>
							</SideBarLink>
						</li>
						{
							headerLinks.map((headerLink) => {
								const { icon, ...sideBarLink } = headerLink;
								return (
									<li>
										<SideBarLink {...sideBarLink}>
											<IconContainer class=" h-7 w-7">
												<headerLink.icon />
											</IconContainer>
										</SideBarLink>
									</li>
								);
							})
						}
					</ul>
				</nav>
			</div>
		</div>
	</nav>
</header>
<style>
	.header-animation {
		animation: header-animation linear both;
		animation-timeline: scroll(root);
		animation-range: 0 100vh;
	}
	@keyframes header-animation {
		from {
			backdrop-filter: blur(8px) opacity(0);
			box-shadow: 0 0px 0px 0px black;
		}
		to {
			backdrop-filter: blur(8px) opacity(1);
			box-shadow: 0 10px 15px -3px black;
		}
	}
</style>
